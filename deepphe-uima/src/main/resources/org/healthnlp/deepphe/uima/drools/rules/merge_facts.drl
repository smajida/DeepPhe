package org.healthnlp.deepphe.uima.drools;

import java.lang.Object;
import java.util.List;
import java.util.ArrayList;

import org.healthnlp.deepphe.util.FHIRUtils;
import org.healthnlp.deepphe.util.FHIRConstants;

import org.healthnlp.deepphe.fhir.fact.Fact;
import org.healthnlp.deepphe.fhir.fact.FactFactory;
import org.healthnlp.deepphe.fhir.fact.FactHelper;

import org.healthnlp.deepphe.fhir.summary.*;
import org.healthnlp.deepphe.uima.drools.*;


import org.apache.ctakes.cancer.owl.OwlOntologyConceptUtil;

declare idMapper
	oldId 			: String
	newId 			: String
	oldDocumantType : String
	oldSummaryId 	: String
	newSummaryId	: String
end

/*
* Add Breast BodySite to CancerSummary if exists
* use a bit higher salience than for Tumors
*/
rule "add-create_BreastToCancerSummary"
	salience 100000
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)
		$cFact : Fact(summaryType == "CancerSummary", documentType != "RecordSummary", 
					 category == "hasBodySite", $cancer_bs_name : name, $cancerId : identifier, $patientId : patientIdentifier,
					$cancer_ancestors: ancestors, ($cancer_bs_name==$domainName || $cancer_ancestors contains $domainName))
		not(Fact(this != $cFact, summaryType == "CancerSummary", category == "hasBodySite", documentType == "RecordSummary",
						patientIdentifier==$patientId))
		not(idMapper (oldId == $cancerId))
	then
		String newId = "CancerSummary-"+$cFact.getType()+"-"+$domainName;
		Fact cf = FactFactory.createFact($cFact, $cFact.getType(), OwlOntologyConceptUtil.BREAST_CANCER_OWL+"#Breast", "RecordSummary");
		cf.setIdentifier(newId);
		cf.addProvenanceFact($cFact);
		modify($record) {
			getCancerSummary().setResourceIdentifier(newId)
		}
		insert(cf);
		insert(new idMapper($cancerId, newId, $cFact.getDocumentType(), $cFact.getSummaryId(), cf.getSummaryId()));
		FactHelper.addFactToSummary($cFact, $record.getCancerSummary(), newId, OwlOntologyConceptUtil.BREAST_CANCER_OWL);
		
		System.out.println("add-create_BreastToCancerSummary newCS: "+cf.getInfo());
end

/*
* Same as add-create_BreastToCancerSummary, but without creation creation here
*/
rule "addOtherBreastToCancerSummary"
	salience 100000
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)
		$cFact : Fact(summaryType == "CancerSummary", documentType != "RecordSummary", 
					 category == "hasBodySite", $cancer_bs_name : name, $cancerId : identifier, $patientId : patientIdentifier,
					$cancer_ancestors: ancestors, ($cancer_bs_name==$domainName || $cancer_ancestors contains $domainName))
		$summaryFact : Fact(summaryType == "CancerSummary", category == "hasBodySite", documentType == "RecordSummary",
						patientIdentifier==$patientId, $newId : identifier)
		not(idMapper (oldId == $cancerId))
	then
		
		$summaryFact.addProvenanceFact($cFact);
		insert(new idMapper($cancerId, $newId, $cFact.getDocumentType(), $cFact.getSummaryId(), $summaryFact.getSummaryId()));

		System.out.println("addOtherBreastToCancerSummary newCS: "+$cFact.getInfo());
end

/*
* Create tumors by location with deepest location name.
* ATTENTION: this should be re-written for multple cancers
* now all the tumors are going into one domain cancer
*/
rule "createTumor-location"
	salience 99999
	no-loop true
	when	
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)
		$cSummaryFact : Fact(summaryType == "CancerSummary", category == "hasBodySite", documentType == "RecordSummary", $cancerSummaryId : summaryId)
		$tumor1_f : Fact(summaryType == "TumorSummary", category == "hasBodySite", $documentType : documentType, $documentType != "RecordSummary", 
				$patientId : patientIdentifier, $tumor1_identifier : identifier, $tumor1_name : name,$tSummaryId : summaryId)		
		not(exists (Fact(this != $tumor1_f, summaryType == "TumorSummary", category == "hasBodySite", documentType != "RecordSummary",
						patientIdentifier==$patientId, ancestors contains  $tumor1_name)))
		not(idMapper (oldId == $tumor1_identifier, oldSummaryId == $tSummaryId))
	then
		
		Fact tf = FactFactory.createFact($tumor1_f, "BodySite", OwlOntologyConceptUtil.BREAST_CANCER_OWL+"#"+$tumor1_name, "RecordSummary");
		tf.addContainerIdentifier($cancerSummaryId);
		String newId = "TumorSummary-"+$tumor1_f.getType()+"-"+$tumor1_name;
		tf.setIdentifier(newId);
		tf.addProvenanceFact($tumor1_f);
		tf.addContainerIdentifier($cSummaryFact.getSummaryId());
		insert(new idMapper($tumor1_identifier, newId, $documentType, $tumor1_f.getSummaryId(), tf.getSummaryId()));
		insert(tf);
		FactHelper.addFactToSummary($tumor1_f, $record.getCancerSummary(), newId, OwlOntologyConceptUtil.BREAST_CANCER_OWL);
		
		String bodySide = "";
		if($tumor1_name.startsWith("Left_"))
			bodySide = "Left";
		else if ($tumor1_name.startsWith("Right_"))
			bodySide = "Right";
		//create body side modifier if any
		if(!"".equals(bodySide)){
		
		Fact bodySideF = FactFactory.cretaeTumorFactModifier(OwlOntologyConceptUtil.BREAST_CANCER_OWL+"#"+bodySide,
					tf, $cSummaryFact, "TumorSummary", "hasBodySide", "RecordSummary-Modifier", "BodySide");
			insert(bodySideF);
System.out.println("Create Tumor at Cancer location: BOdySide: "+bodySideF.getInfo());
		}

		System.out.println("Create Tumor at Cancer location: newF: "+tf.getInfo());
end

/*
* Add provinance facts for 
*/
rule "aggregateSummaries"
	salience 99999
	no-loop true
	when
		$record : MedicalRecord()
		$docFact : Fact($documentType : documentType, $documentType != "RecordSummary", $oldId : identifier, $summaryType : summaryType, 
					  $category : category, $nameF : name, $summaryId : summaryId)
		$summaryF : Fact(documentType == "RecordSummary", $newId : identifier, summaryType == $summaryType, category == $category,
						(name == $nameF || ancestors contains $nameF))
		not(idMapper (oldId == $oldId, oldSummaryId == $summaryId))
	then
		modify($summaryF) { addProvenanceFact($docFact)}
		insert(new idMapper($oldId, $newId, $documentType, $docFact.getSummaryId(), $summaryF.getSummaryId()));
		
		System.out.println("aggregateTumors2 : About to add oldId: "+$docFact.getInfo());
end



rule "test-idMap"
	no-loop true
	when 
		$m :idMapper()
	then
		System.out.println("idMapper oldId: "+$m.getOldId()+" newId: "+$m.getNewId()+" oldDocumantType: "+$m.getOldDocumantType()
		+" oldSummaryId: "+$m.getOldSummaryId()+" newSummaryId: "+$m.getNewSummaryId());
end	

rule "debug-RecordSummary"
	salience 2
	no-loop true
	when 
		$summaryF : Fact(documentType == "RecordSummary")
	then
		System.out.println("* RecordSummary: "+$summaryF.getInfo());
end	

rule "debug-RecordSummary-Modifier"
	salience 1
	no-loop true
	when 
		$summaryF : Fact(documentType == "RecordSummary-Modifier")
	then
		System.out.println("*** RecordSummary-MODIFIER: "+$summaryF.getInfo());
end	
