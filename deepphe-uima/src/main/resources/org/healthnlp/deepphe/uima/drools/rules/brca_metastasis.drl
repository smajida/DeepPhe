package org.healthnlp.deepphe.uima.drools;

import java.lang.Object;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;

import org.healthnlp.deepphe.util.FHIRUtils;
import org.healthnlp.deepphe.util.FHIRConstants;

import org.healthnlp.deepphe.fhir.fact.Fact;
import org.healthnlp.deepphe.fhir.fact.FactFactory;
import org.healthnlp.deepphe.fhir.fact.FactHelper;
import org.healthnlp.deepphe.fhir.fact.BodySiteFact;

import org.healthnlp.deepphe.fhir.summary.*;
import org.healthnlp.deepphe.uima.drools.*;

import org.apache.ctakes.cancer.owl.OwlConstants;

/*
* primaryTumor-2 :
* Olga: create TumorSummary here AND:
* If tumors are on the same side and hitologicType is ductal or there is histologic type specified = >combine them as one "primary"
* Tumors that are intraductal or ductal and Paget Disease are a single primary => 
* If you have two tumors that are located within the same breast and both tumors have HistologicalType=Ductal 
* and one or both of the tumors have Paget's Disease as a diagnosis, then you can merge the two tumors into one tumor with tumor type= "Primary".
*/
rule "primaryTumor-2-Ductal"
	salience 88879
	no-loop true
	when
		$record : MedicalRecord()	
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)  
	    
		$site_tFact : Fact(summaryType=="TumorSummary", category == "hasBodySite", documentType != "RecordSummary",
					$t_summaryId: summaryId, (name==$domainName || ancestors contains $domainName))
		$side_tFact : Fact(summaryType=="TumorSummary", category == "hasBodySiteModifier", type == "BodySide", documentType != "RecordSummary",
					$sideName : name, containerIdentifier contains $t_summaryId)
		$hist_tFact : Fact(summaryType=="TumorPhenotype", category == "hasHistologicType", $name : name, ($name=="Ductal" || $name=="Lobular"), 
				documentType != "RecordSummary",containerIdentifier contains $t_summaryId)
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $site_tFact, bodySite == $domainName, bodySide == $sideName, 
			$histologicType :histologicType, ($histologicType =="Ductal" || $histologicType == "Lobular"), readyForRetraction == false)
		not (Fact (summaryType=="TumorSummary", documentType == "RecordSummary", provenanceFacts contains $site_tFact))
		
		$sameTumors : List()
      	from collect( MergedTumor(tumorSiteFactSet not contains $site_tFact, bodySite == $domainName, $bodySide1 : bodySide, 
      			($bodySide1 == $sideName || $bodySide1 == ""), readyForRetraction == false,
      				$histologicType2 :histologicType, ($histologicType2 =="Ductal" || $histologicType2 == "Lobular")))
		
	then
	//add new tumor
System.out.print(".");
		
		String newId = "TumorSummary-"+$tl_1.getMergedTumorId();
//System.out.println("primaryTumor-2-Ductal: "+$tl_1.getInfo());		
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($site_tFact, "BodySite", OwlConstants.BREAST_CANCER_OWL+"#"+$site_tFact.getName(), "RecordSummary");
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId); tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.addProvenanceFact($site_tFact);
		tf.addRulesApplied("primaryTumor");
		insert(new IdMapper($site_tFact.getIdentifier(), tf.getIdentifier(), $site_tFact.getDocumentType(), $site_tFact.getSummaryId(), tf.getSummaryId()));
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#PrimaryTumor", tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_TUMOR_TYPE, "RecordSummary", "TumorType");
		Fact tumorsideF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+$sideName, tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_SIDE);
		
	    tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);

		tumorsideF.setSummaryId(tf.getSummaryId()); tf.addModifier(tumorsideF);
		insert(tf);
		
		$sameTumors.add($tl_1);
		for(Object t : $sameTumors){
			MergedTumor sameMT = (MergedTumor)t;
//System.out.println("SAME MT primaryTumor-2-Ductal: "+sameMT.getInfo());
			if(sameMT != $tl_1)
				sameMT.setMergedTumorId($tl_1.getMergedTumorId());
			sameMT.setReadyForRetraction(true);
			update(sameMT);
			Set<Fact> sameTSet = sameMT.getTumorSiteFactSet();
			for(Fact sameTF : sameTSet){
				insert(new IdMapper(sameTF.getIdentifier(), tf.getIdentifier(), sameTF.getDocumentType(), sameTF.getSummaryId(), tf.getSummaryId()));

	    		Set<Fact> qSet = sameMT.getQuadrantFactSet();
				for(Fact f : qSet){
					Fact qf = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+f.getName(), tf, 
																$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_MODIFIER);
					qf.setAncestors(f.getAncestors());
					qf.addContainerIdentifier(tf.getSummaryId());
					qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
					qf.setSummaryId(newId);
					tf.addModifier(qf);
					insert(qf);
				}
				
				Set<Fact> clockSet = sameMT.getClockfacePosFactSet();
				for(Fact f : clockSet){
					Fact qf = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+f.getName(), tf, 
																$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_MODIFIER);
					qf.setAncestors(f.getAncestors());
					qf.addContainerIdentifier(tf.getSummaryId());
					qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
					qf.setSummaryId(newId);
					tf.addModifier(qf);
					insert(qf);
				}
			}
		

		}		

		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)	
		}	
//System.out.println("FINALLY :Ductal Prim tf : "+tf.getSummaryText());

		insert (tumorTypeF);
		insert (tumorsideF);
		
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);
		//remove all the MergedTumor
		$tl_1.setReadyForRetraction(true);

		update ($tl_1);
		
System.out.print(".");	

end


/* 
*primaryTumor :
* If you have a tumor located in the same organ (breast) as the cancer, then tumor type = "primary". 
* ALSO secondPrimary1-1 :
* If tumor 1 is located on the right side of the body and tumor 2 is on the left, then tumor 2 has tumor type primary tumor. 
* ALSO secondPrimary1-2 : 
* If tumor 1 is located on the left side of the body and tumor 2 is on the right, then tumor 2 has tumor type primary tumor. 
*/
rule "primaryTumor"
	salience 88877
	no-loop true
	when
		$record : MedicalRecord()	
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		
		$tumorFact : Fact(summaryType=="TumorSummary", category == "hasBodySite", $tumor_bs_name :name, documentType != "RecordSummary",
					$tumor_id : identifier, rulesApplied not contains "primaryTumor", $tumor_ancestors : ancestors, $t_summaryId : summaryId,
					($tumor_bs_name==$domainName || $tumor_ancestors contains $domainName))
		$side_tFact : Fact(summaryType=="TumorSummary", category == "hasBodySiteModifier", type == "BodySide", documentType != "RecordSummary",
					$sideName : name, containerIdentifier contains $t_summaryId)			
		$tl_1 : MergedTumor(tumorSiteFactSet contains $tumorFact, bodySide == $sideName, readyForRetraction == false)
		not (Fact (summaryType=="TumorSummary", documentType == "RecordSummary", provenanceFacts contains $tumorFact))
		
	then
		modify($tumorFact){	addRulesApplied("primaryTumor") }
//System.out.println("primaryTumor: "+$tl_1.getInfo());
		//add new tumor
		String newId = "TumorSummary-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($tumorFact, "BodySite", OwlConstants.BREAST_CANCER_OWL+"#"+$tumorFact.getName(), "RecordSummary");
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier($tumorFact.getName()+"-"+newId);
		tf.setSummaryId(newId);
		tf.addProvenanceFact($tumorFact);
		tf.addRulesApplied("primaryTumor");
		insert(new IdMapper($tumorFact.getIdentifier(), tf.getIdentifier(), $tumorFact.getDocumentType(), $tumorFact.getSummaryId(), newId));
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#PrimaryTumor", $tumorFact, 
														$cancerFact, "TumorSummary", "hasTumorType", "RecordSummary", "TumorType");
		
		Fact tumorsideF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+$sideName, tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_SIDE);
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
		
		tumorsideF.setSummaryId(tf.getSummaryId()); tf.addModifier(tumorsideF);

		Set<Fact> qSet = $tl_1.getQuadrantFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+f.getName(), tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
		
		Set<Fact> clockSet = $tl_1.getClockfacePosFactSet();
		for(Fact f : clockSet){
			Fact qf = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+f.getName(), tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)
		}	

		insert (tumorTypeF);
		insert (tumorsideF);
		
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);

		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);
System.out.print(".");		
end


rule "regionalRecurrence1-1-Axillary_Lymph_Node"
	salience 88876
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		
		//rec tumor
		$recTumor : Fact(summaryType=="TumorSummary", category == "hasBodySite", $recTumorName : name, $rectAncestors : ancestors,documentType != "RecordSummary",
						($recTumorName == "Axillary_Lymph_Node" || $rectAncestors contains "Axillary_Lymph_Node"), $recSummaryId : summaryId,
						rulesApplied not contains "regionalRecurrence1-1-Axillary_Lymph_Node")
		$side_tFact : Fact(summaryType=="TumorSummary", category == "hasBodySiteModifier", type == "BodySide", documentType != "RecordSummary",
					$sideName : name, containerIdentifier contains $recSummaryId)	
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $recTumor, bodySide == $sideName, readyForRetraction == false)
		//primary tumor			
		$pSite_tFact : Fact(summaryType=="TumorSummary", category == "hasTumorType", documentType == "RecordSummary",
					$t_summaryId: summaryId, name=="PrimaryTumor", containerIdentifier contains $newSummaryId)
						
		$pSide_tFact : Fact(summaryType=="TumorSummary", category == "hasBodySiteModifier", type == "BodySide", documentType == "RecordSummary",
					name == $sideName, containerIdentifier contains $t_summaryId)
		not (Fact (summaryType=="TumorSummary", documentType == "RecordSummary", provenanceFacts contains $recTumor))
		
	then
System.out.print(".");
		modify($recTumor){	addRulesApplied("regionalRecurrence1-1-Axillary_Lymph_Node") }
		//add new tumor
		String newId = "TumorSummary-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($recTumor, "BodySite", OwlConstants.BREAST_CANCER_OWL+"#"+$recTumorName, "RecordSummary");
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.addProvenanceFact($recTumor);
		insert(new IdMapper($recTumor.getIdentifier(), tf.getIdentifier(), $recTumor.getDocumentType(), $recTumor.getSummaryId(), tf.getSummaryId()));
		
		
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#RegionalRecurrence", $recTumor, 
														$cancerFact, "TumorSummary", "hasTumorType", "RecordSummary", "TumorType");
		
		Fact tumorsideF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+$sideName, tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_SIDE);
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
	    
	    tumorsideF.setSummaryId(tf.getSummaryId()); tf.addModifier(tumorsideF);
		
		
		Set<Fact> qSet = $tl_1.getQuadrantFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+f.getName(), tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
		
		Set<Fact> clockSet = $tl_1.getClockfacePosFactSet();
		for(Fact f : clockSet){
			Fact qf = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+f.getName(), tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)
			
		}	

		insert (tumorTypeF);
		insert (tumorsideF);
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);
		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

		System.out.print(".");

end


/*
* regionalRecurrence1-2 :
* If there is a tumor located in the infraclavicular lymph node or children located on the same side of the body as the primary tumor, 
* then the tumor(s) in the infraclavicular lymph nodes have a tumor type of regional recurrences 
*/
rule "regionalRecurrence1-2-Infraclavicular_Lymph_Node"
	salience 88875
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		
		//rec tumor
		$recTumor : Fact(summaryType=="TumorSummary", category == "hasBodySite", $recTumorName : name, $rectAncestors : ancestors,documentType != "RecordSummary",
						($recTumorName == "Infraclavicular_Lymph_Node" || $rectAncestors contains "Infraclavicular_Lymph_Node"), $recSummaryId : summaryId,
						rulesApplied not contains "regionalRecurrence1-2-Infraclavicular_Lymph_Node")
		$side_tFact : Fact(summaryType=="TumorSummary", category == "hasBodySiteModifier", type == "BodySide", documentType != "RecordSummary",
					$sideName : name, containerIdentifier contains $recSummaryId)	
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $recTumor, bodySide == $sideName, readyForRetraction == false)
		//primary tumor			
		$pSite_tFact : Fact(summaryType=="TumorSummary", category == "hasTumorType", documentType == "RecordSummary",
					$t_summaryId: summaryId, name=="PrimaryTumor", containerIdentifier contains $newSummaryId)
						
		$pSide_tFact : Fact(summaryType=="TumorSummary", category == "hasBodySiteModifier", type == "BodySide", documentType == "RecordSummary",
					name == $sideName, containerIdentifier contains $t_summaryId)
		not (Fact (summaryType=="TumorSummary", documentType == "RecordSummary", provenanceFacts contains $recTumor))
		
	then

		modify($recTumor){	addRulesApplied("regionalRecurrence1-2-Infraclavicular_Lymph_Node") }
		//add new tumor
		String newId = "TumorSummary-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($recTumor, "BodySite", OwlConstants.BREAST_CANCER_OWL+"#"+$recTumorName, "RecordSummary");
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.setSummaryId(newId);
		tf.addProvenanceFact($recTumor);
		insert(new IdMapper($recTumor.getIdentifier(), tf.getIdentifier(), $recTumor.getDocumentType(), $recTumor.getSummaryId(), tf.getSummaryId()));
		
		
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#RegionalRecurrence", $recTumor, 
														$cancerFact, "TumorSummary", "hasTumorType", "RecordSummary", "TumorType");
		
		Fact tumorsideF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+$sideName, tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_SIDE);
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
	    
	    tumorsideF.setSummaryId(tf.getSummaryId()); tf.addModifier(tumorsideF);
		
		
		Set<Fact> qSet = $tl_1.getQuadrantFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+f.getName(), tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
		
		Set<Fact> clockSet = $tl_1.getClockfacePosFactSet();
		for(Fact f : clockSet){
			Fact qf = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+f.getName(), tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)
			
		}	

		insert (tumorTypeF);
		insert (tumorsideF);
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);
		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

		System.out.print(".");

end

/*
* regionalRecurrence1-3a :
* If there is a tumor located in the supraclavicular lymph node or children located on the same side of the body 
* as the primary tumor, then the tumor(s) in the supraclavicular internal mammary/parasternal lymph nodes 
* have a tumor type of regional recurrences 
*/
rule "regionalRecurrence1-3a"
	salience 88874
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		
		//rec tumor
		$recTumor : Fact(summaryType=="TumorSummary", category == "hasBodySite", $recTumorName : name, $rectAncestors : ancestors,documentType != "RecordSummary",
						($recTumorName == "Supraclavicular_Lymph_Node" || $rectAncestors contains "Supraclavicular_Lymph_Node"), $recSummaryId : summaryId,
						rulesApplied not contains "regionalRecurrence1-3a")
		$side_tFact : Fact(summaryType=="TumorSummary", category == "hasBodySiteModifier", type == "BodySide", documentType != "RecordSummary",
					$sideName : name, containerIdentifier contains $recSummaryId)	
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $recTumor, bodySide == $sideName, readyForRetraction == false)
		//primary tumor			
		$pSite_tFact : Fact(summaryType=="TumorSummary", category == "hasTumorType", documentType == "RecordSummary",
					$t_summaryId: summaryId, name=="PrimaryTumor", containerIdentifier contains $newSummaryId)
						
		$pSide_tFact : Fact(summaryType=="TumorSummary", category == "hasBodySiteModifier", type == "BodySide", documentType == "RecordSummary",
					name == $sideName, containerIdentifier contains $t_summaryId)
		not (Fact (summaryType=="TumorSummary", documentType == "RecordSummary", provenanceFacts contains $recTumor))
		
	then

		modify($recTumor){	addRulesApplied("regionalRecurrence1-3a") }
		//add new tumor
		String newId = "TumorSummary-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($recTumor, "BodySite", OwlConstants.BREAST_CANCER_OWL+"#"+$recTumorName, "RecordSummary");
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.setSummaryId(newId);
		tf.addProvenanceFact($recTumor);
		insert(new IdMapper($recTumor.getIdentifier(), tf.getIdentifier(), $recTumor.getDocumentType(), $recTumor.getSummaryId(), tf.getSummaryId()));
		
		
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#RegionalRecurrence", $recTumor, 
														$cancerFact, "TumorSummary", "hasTumorType", "RecordSummary", "TumorType");
		
		Fact tumorsideF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+$sideName, tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_SIDE);
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
	    
	    tumorsideF.setSummaryId(tf.getSummaryId()); tf.addModifier(tumorsideF);
		
		
		Set<Fact> qSet = $tl_1.getQuadrantFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+f.getName(), tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
		
		Set<Fact> clockSet = $tl_1.getClockfacePosFactSet();
		for(Fact f : clockSet){
			Fact qf = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+f.getName(), tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)
			
		}	

		insert (tumorTypeF);
		insert (tumorsideF);
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);
		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

		System.out.print(".");

end


/*
* regionalRecurrence1-3b :
* If there is a tumor located in the internal mammary/parasternal lymph node or children located on the same side of the body 
* as the primary tumor, then the tumor(s) in the supraclavicular internal mammary/parasternal lymph nodes 
* have a tumor type of regional recurrences 
*/
rule "regionalRecurrence1-3b"
	salience 88873
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		
		//rec tumor
		$recTumor : Fact(summaryType=="TumorSummary", category == "hasBodySite", $recTumorName : name, $rectAncestors : ancestors,documentType != "RecordSummary",
						($recTumorName == "Internal_Mammary_Lymph_Node" || $rectAncestors contains "Internal_Mammary_Lymph_Node"), $recSummaryId : summaryId,
						rulesApplied not contains "regionalRecurrence1-3b")
		$side_tFact : Fact(summaryType=="TumorSummary", category == "hasBodySiteModifier", type == "BodySide", documentType != "RecordSummary",
					$sideName : name, containerIdentifier contains $recSummaryId)	
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $recTumor, bodySide == $sideName, readyForRetraction == false)
		//primary tumor			
		$pSite_tFact : Fact(summaryType=="TumorSummary", category == "hasTumorType", documentType == "RecordSummary",
					$t_summaryId: summaryId, name=="PrimaryTumor", containerIdentifier contains $newSummaryId)
						
		$pSide_tFact : Fact(summaryType=="TumorSummary", category == "hasBodySiteModifier", type == "BodySide", documentType == "RecordSummary",
					name == $sideName, containerIdentifier contains $t_summaryId)
		not (Fact (summaryType=="TumorSummary", documentType == "RecordSummary", provenanceFacts contains $recTumor))
		
	then

		modify($recTumor){	addRulesApplied("regionalRecurrence1-3b") }
		//add new tumor
		String newId = "TumorSummary-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($recTumor, "BodySite", OwlConstants.BREAST_CANCER_OWL+"#"+$recTumorName, "RecordSummary");
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.setSummaryId(newId);
		tf.addProvenanceFact($recTumor);
		insert(new IdMapper($recTumor.getIdentifier(), tf.getIdentifier(), $recTumor.getDocumentType(), $recTumor.getSummaryId(), tf.getSummaryId()));
		
		
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#RegionalRecurrence", $recTumor, 
														$cancerFact, "TumorSummary", "hasTumorType", "RecordSummary", "TumorType");
		
		Fact tumorsideF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+$sideName, tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_SIDE);
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
	    
	    tumorsideF.setSummaryId(tf.getSummaryId()); tf.addModifier(tumorsideF);
		
		
		Set<Fact> qSet = $tl_1.getQuadrantFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+f.getName(), tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
		
		Set<Fact> clockSet = $tl_1.getClockfacePosFactSet();
		for(Fact f : clockSet){
			Fact qf = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+f.getName(), tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)
			
		}	

		insert (tumorTypeF);
		insert (tumorsideF);
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);
		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

		System.out.print(".");

end



/*
* regionalRecurrence1-4 :
* If there is a tumor located in the intramammary lymph node or children located on the same side of the body 
* as the primary tumor, then the tumor(s) in the intramammary lymph nodes have a tumor type of regional recurrences 
*/
rule "regionalRecurrence1-4"
	salience 88872
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		
		//rec tumor
		$recTumor : Fact(summaryType=="TumorSummary", category == "hasBodySite", $recTumorName : name, $rectAncestors : ancestors,documentType != "RecordSummary",
						($recTumorName == "Intramammary_Lymph_Node" || $rectAncestors contains "Intramammary_Lymph_Node"), $recSummaryId : summaryId,
						rulesApplied not contains "regionalRecurrence1-4")
		$side_tFact : Fact(summaryType=="TumorSummary", category == "hasBodySiteModifier", type == "BodySide", documentType != "RecordSummary",
					$sideName : name, containerIdentifier contains $recSummaryId)	
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $recTumor, bodySide == $sideName, readyForRetraction == false)
		//primary tumor			
		$pSite_tFact : Fact(summaryType=="TumorSummary", category == "hasTumorType", documentType == "RecordSummary",
					$t_summaryId: summaryId, name=="PrimaryTumor", containerIdentifier contains $newSummaryId)
						
		$pSide_tFact : Fact(summaryType=="TumorSummary", category == "hasBodySiteModifier", type == "BodySide", documentType == "RecordSummary",
					name == $sideName, containerIdentifier contains $t_summaryId)
		not (Fact (summaryType=="TumorSummary", documentType == "RecordSummary", provenanceFacts contains $recTumor))
		
	then

		modify($recTumor){	addRulesApplied("regionalRecurrence1-4") }
		//add new tumor
		String newId = "TumorSummary-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($recTumor, "BodySite", OwlConstants.BREAST_CANCER_OWL+"#"+$recTumorName, "RecordSummary");
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.setSummaryId(newId);
		tf.addProvenanceFact($recTumor);
		insert(new IdMapper($recTumor.getIdentifier(), tf.getIdentifier(), $recTumor.getDocumentType(), $recTumor.getSummaryId(), tf.getSummaryId()));
		
		
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#RegionalRecurrence", $recTumor, 
														$cancerFact, "TumorSummary", "hasTumorType", "RecordSummary", "TumorType");
		
		Fact tumorsideF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+$sideName, tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_SIDE);
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
	    
	    tumorsideF.setSummaryId(tf.getSummaryId()); tf.addModifier(tumorsideF);
		
		
		Set<Fact> qSet = $tl_1.getQuadrantFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+f.getName(), tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
		
		Set<Fact> clockSet = $tl_1.getClockfacePosFactSet();
		for(Fact f : clockSet){
			Fact qf = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+f.getName(), tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)
			
		}	

		insert (tumorTypeF);
		insert (tumorsideF);
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);
		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

		System.out.print(".");

end


/*
* distantRecurrence1:
* Primary tumor located on the same side as a tumor in any other type of lymph nodes except for axillary, 
* infraclavicular, supraclavicular internal mammary/parasternal, or intramammary are considered distant metastasis  
*/
rule "distantRecurrence1"
	salience 88871
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		
		//rec tumor
		$recTumor : Fact(summaryType=="TumorSummary", category == "hasBodySite", $recTumorName : name, $rectAncestors : ancestors,documentType != "RecordSummary",
						($recTumorName != "Axillary_Lymph_Node" && $rectAncestors not contains "Axillary_Lymph_Node" &&
						$recTumorName != "Infraclavicular_Lymph_Node" && $rectAncestors not contains "Infraclavicular_Lymph_Node" &&
						$recTumorName != "Supraclavicular_Lymph_Node" && $rectAncestors not contains "Supraclavicular_Lymph_Node" &&
						$recTumorName != "Internal_Mammary_Lymph_Node" && $rectAncestors not contains "Internal_Mammary_Lymph_Node" &&
						$recTumorName != "Intramammary_Lymph_Node" && $rectAncestors not contains "Intramammary_Lymph_Node"), 
						$recSummaryId : summaryId, rulesApplied not contains "distantRecurrence1")
		$side_tFact : Fact(summaryType=="TumorSummary", category == "hasBodySiteModifier", type == "BodySide", documentType != "RecordSummary",
					$sideName : name, containerIdentifier contains $recSummaryId)	
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $recTumor, bodySide == $sideName, readyForRetraction == false)
		//primary tumor			
		$pSite_tFact : Fact(summaryType=="TumorSummary", category == "hasTumorType", documentType == "RecordSummary",
					$t_summaryId: summaryId, name=="PrimaryTumor", containerIdentifier contains $newSummaryId)
						
		$pSide_tFact : Fact(summaryType=="TumorSummary", category == "hasBodySiteModifier", type == "BodySide", documentType == "RecordSummary",
					name == $sideName, containerIdentifier contains $t_summaryId)
		not (Fact (summaryType=="TumorSummary", documentType == "RecordSummary", provenanceFacts contains $recTumor))
		
	then

		modify($recTumor){	addRulesApplied("distantRecurrence1") }
		//add new tumor
		String newId = "TumorSummary-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($recTumor, "BodySite", OwlConstants.BREAST_CANCER_OWL+"#"+$recTumorName, "RecordSummary");
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.setSummaryId(newId);
		tf.addProvenanceFact($recTumor);
		insert(new IdMapper($recTumor.getIdentifier(), newId, $recTumor.getDocumentType(), $recTumor.getSummaryId(), tf.getSummaryId()));
		
		
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#DistantRecurrence", $recTumor, 
														$cancerFact, "TumorSummary", "hasTumorType", "RecordSummary", "TumorType");
		
		Fact tumorsideF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+$sideName, tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_SIDE);
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
	    
	    tumorsideF.setSummaryId(tf.getSummaryId()); tf.addModifier(tumorsideF);
		
		
		Set<Fact> qSet = $tl_1.getQuadrantFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+f.getName(), tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
		
		Set<Fact> clockSet = $tl_1.getClockfacePosFactSet();
		for(Fact f : clockSet){
			Fact qf = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+f.getName(), tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)
			
		}	

		insert (tumorTypeF);
		insert (tumorsideF);
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);
		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

		System.out.print(".");

end


/*
* distantRecurrence2-1:
*  	If there is a tumor located in a lymph node on the opposite side of the body as the primary tumor, 
* then the tumor located in the lymph node has type distant recurrence.  
*/
rule "distantRecurrence2-1"
	salience 88870
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		
		//rec tumor
		$recTumor : Fact(summaryType=="TumorSummary", category == "hasBodySite", $recTumorName : name, $rectAncestors : ancestors,documentType != "RecordSummary",
						($recTumorName == "Lymph_Node" && $rectAncestors contains "Lymph_Node"), 
						$recSummaryId : summaryId, rulesApplied not contains "distantRecurrence2-1")
		$side_tFact : Fact(summaryType=="TumorSummary", category == "hasBodySiteModifier", type == "BodySide", documentType != "RecordSummary",
					$sideName : name, containerIdentifier contains $recSummaryId)	
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $recTumor, bodySide == $sideName, readyForRetraction == false)
		//primary tumor			
		$pSite_tFact : Fact(summaryType=="TumorSummary", category == "hasTumorType", documentType == "RecordSummary",
					$t_summaryId: summaryId, name=="PrimaryTumor", containerIdentifier contains $newSummaryId)
						
		$pSide_tFact : Fact(summaryType=="TumorSummary", category == "hasBodySiteModifier", type == "BodySide", documentType == "RecordSummary",
					name != $sideName, containerIdentifier contains $t_summaryId)
		not (Fact (summaryType=="TumorSummary", documentType == "RecordSummary", provenanceFacts contains $recTumor))
		
	then

		modify($recTumor){	addRulesApplied("distantRecurrence2-1") }
		//add new tumor
		String newId = "TumorSummary-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($recTumor, "BodySite", OwlConstants.BREAST_CANCER_OWL+"#"+$recTumorName, "RecordSummary");
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.setSummaryId(newId);
		tf.addProvenanceFact($recTumor);
		insert(new IdMapper($recTumor.getIdentifier(), tf.getIdentifier(), $recTumor.getDocumentType(), $recTumor.getSummaryId(), tf.getSummaryId()));
		
		
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#DistantRecurrence", $recTumor, 
														$cancerFact, "TumorSummary", "hasTumorType", "RecordSummary", "TumorType");
		
		Fact tumorsideF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+$sideName, tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_SIDE);
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
	    
	    tumorsideF.setSummaryId(tf.getSummaryId()); tumorsideF.setSummaryId(tf.getSummaryId()); tf.addModifier(tumorsideF); 
		
		
		Set<Fact> qSet = $tl_1.getQuadrantFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+f.getName(), tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
		
		Set<Fact> clockSet = $tl_1.getClockfacePosFactSet();
		for(Fact f : clockSet){
			Fact qf = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+f.getName(), tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)
			
		}	

		insert (tumorTypeF);
		insert (tumorsideF);
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);
		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

		System.out.print(".");

end

/*
* distantRecurrence3::
*  If there is tumor located in the Sternal Bone and children, then the tumor has type Distant Recurrence 
*/
rule "distantRecurrence3"
	salience 88869
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		
		//rec tumor
		$recTumor : Fact(summaryType=="TumorSummary", category == "hasBodySite", $recTumorName : name, $rectAncestors : ancestors,documentType != "RecordSummary",
						$recTumorName == "Sternum", 
						$recSummaryId : summaryId, rulesApplied not contains "distantRecurrence3")
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $recTumor, readyForRetraction == false)
		not (Fact (summaryType=="TumorSummary", documentType == "RecordSummary", provenanceFacts contains $recTumor))
		
	then

		modify($recTumor){	addRulesApplied("distantRecurrence3") }
		//add new tumor
		String newId = "TumorSummary-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($recTumor, "BodySite", OwlConstants.BREAST_CANCER_OWL+"#"+$recTumorName, "RecordSummary");
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.setSummaryId(newId);
		tf.addProvenanceFact($recTumor);
		insert(new IdMapper($recTumor.getIdentifier(), tf.getIdentifier(), $recTumor.getDocumentType(), $recTumor.getSummaryId(), tf.getSummaryId()));
		
		
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#DistantRecurrence", $recTumor, 
														$cancerFact, "TumorSummary", "hasTumorType", "RecordSummary", "TumorType");
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
		
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)
		}	
		
		insert (tumorTypeF);
		
		//side if any
		Set<Fact> qSet = $tl_1.getBodySideFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+f.getName(), tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_SIDE);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
		
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);
		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

		System.out.print(".");

end


/*
* distantRecurrence4a:
* A tumor located in any organ other than breast (excluding those listed as local, regional and second primary events above) 
* are considered distant recurrence. EXCLUSIONS: axillary lymph node, infraclavicular lymph node, supraclavicular internal 
* mammary/parasternal lymph node, intramammary lymph node  
* Olga:
* tumor has body side
*/
rule "distantRecurrence4a"
	salience 88768
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		
		//rec tumor
		$recTumor : Fact(summaryType=="TumorSummary", category == "hasBodySite", $recTumorName : name, $rectAncestors : ancestors,documentType != "RecordSummary",
						($recTumorName != "Axillary_Lymph_Node" && $rectAncestors not contains "Axillary_Lymph_Node" &&
						$recTumorName != "Infraclavicular_Lymph_Node" && $rectAncestors not contains "Infraclavicular_Lymph_Node" &&
						$recTumorName != "Supraclavicular_Lymph_Node" && $rectAncestors not contains "Supraclavicular_Lymph_Node" &&
						$recTumorName != "Internal_Mammary_Lymph_Node" && $rectAncestors not contains "Internal_Mammary_Lymph_Node" &&
						$recTumorName != "Intramammary_Lymph_Node" && $rectAncestors not contains "Intramammary_Lymph_Node"), 
						$recSummaryId : summaryId, rulesApplied not contains "distantRecurrence4")
		$side_tFact : Fact(summaryType=="TumorSummary", category == "hasBodySiteModifier", type == "BodySide", documentType != "RecordSummary",
					$sideName : name, containerIdentifier contains $recSummaryId)	
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $recTumor, bodySide == $sideName, readyForRetraction == false)
		not (Fact (summaryType=="TumorSummary", documentType == "RecordSummary", provenanceFacts contains $recTumor))
		
	then

		modify($recTumor){	addRulesApplied("distantRecurrence4") }
		//add new tumor
		String newId = "TumorSummary-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($recTumor, "BodySite", OwlConstants.BREAST_CANCER_OWL+"#"+$recTumorName, "RecordSummary");
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.setSummaryId(newId);
		tf.addProvenanceFact($recTumor);
		insert(new IdMapper($recTumor.getIdentifier(), tf.getIdentifier(), $recTumor.getDocumentType(), $recTumor.getSummaryId(), tf.getSummaryId()));
		
		
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#DistantRecurrence", $recTumor, 
														$cancerFact, "TumorSummary", "hasTumorType", "RecordSummary", "TumorType");
		
		Fact tumorsideF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+$sideName, tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_SIDE);
														
		tumorTypeF.addContainerIdentifier(tf.getSummaryId());
		tumorTypeF.setIdentifier(tumorTypeF.getName()+"-"+newId);
		tumorTypeF.setSummaryId(newId);
	    
	    tumorsideF.setSummaryId(tf.getSummaryId()); tf.addModifier(tumorsideF); 
		
		
		Set<Fact> qSet = $tl_1.getQuadrantFactSet();
		for(Fact f : qSet){
			Fact qf = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+f.getName(), tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
		
		Set<Fact> clockSet = $tl_1.getClockfacePosFactSet();
		for(Fact f : clockSet){
			Fact qf = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#"+f.getName(), tf, 
														$cancerFact, "TumorSummary", FHIRConstants.HAS_BODY_MODIFIER, "RecordSummary", FHIRConstants.BODY_MODIFIER);
			qf.setAncestors(f.getAncestors());
			qf.addContainerIdentifier(tf.getSummaryId());
			qf.setIdentifier(tumorTypeF.getName()+"-"+newId);
			qf.setSummaryId(newId);
			tf.addModifier(qf);
			insert(qf);
		}
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)
		}	

		insert (tumorTypeF);
		insert (tumorsideF);
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);
		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

System.out.print(".");

end

/*
* distantRecurrence4a:
* A tumor located in any organ other than breast (excluding those listed as local, regional and second primary events above) 
* are considered distant recurrence. EXCLUSIONS: axillary lymph node, infraclavicular lymph node, supraclavicular internal 
* mammary/parasternal lymph node, intramammary lymph node  
* Olga:
* tumor has NObody side
*/
rule "distantRecurrence4b"
	salience 87767
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		//rec tumor
		$recTumor : Fact(summaryType=="TumorSummary", category == "hasBodySite", $recTumorName : name, $rectAncestors : ancestors,documentType != "RecordSummary",
						($recTumorName != "Axillary_Lymph_Node" && $rectAncestors not contains "Axillary_Lymph_Node" &&
						$recTumorName != "Infraclavicular_Lymph_Node" && $rectAncestors not contains "Infraclavicular_Lymph_Node" &&
						$recTumorName != "Supraclavicular_Lymph_Node" && $rectAncestors not contains "Supraclavicular_Lymph_Node" &&
						$recTumorName != "Internal_Mammary_Lymph_Node" && $rectAncestors not contains "Internal_Mammary_Lymph_Node" &&
						$recTumorName != "Intramammary_Lymph_Node" && $rectAncestors not contains "Intramammary_Lymph_Node"), 
						$recSummaryId : summaryId, rulesApplied not contains "distantRecurrence4")
		not(Fact(summaryType=="TumorSummary", category == "hasBodySiteModifier", type == "BodySide", documentType != "RecordSummary",
					$sideName : name, containerIdentifier contains $recSummaryId))
					
		$tl_1 : MergedTumor(tumorSiteFactSet contains $recTumor, readyForRetraction == false)
		not (Fact (summaryType=="TumorSummary", documentType == "RecordSummary", provenanceFacts contains $recTumor))
		
	then

		modify($recTumor){	addRulesApplied("distantRecurrence4") }
		//add new tumor
		String newId = "TumorSummary-"+$tl_1.getMergedTumorId();
		BodySiteFact tf = (BodySiteFact)FactFactory.createFact($recTumor, "BodySite", OwlConstants.BREAST_CANCER_OWL+"#"+$recTumorName, "RecordSummary");
		tf.addContainerIdentifier($newSummaryId); tf.setSummaryId(newId);
		tf.setIdentifier(tf.getName()+"-"+newId);
		tf.setSummaryId(newId);
		tf.addProvenanceFact($recTumor);
		insert(new IdMapper($recTumor.getIdentifier(), tf.getIdentifier(), $recTumor.getDocumentType(), $recTumor.getSummaryId(), tf.getSummaryId()));
		
		FactHelper.addFactToSummary(tf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);
		insert(tf);
		
		Fact tumorTypeF = FactFactory.createTumorFactModifier(OwlConstants.BREAST_CANCER_OWL+"#DistantRecurrence", $recTumor, 
														$cancerFact, "TumorSummary", "hasTumorType", "RecordSummary", "TumorType");
														
		tumorTypeF.addContainerIdentifier(newId);
	    
		modify($record){
			getCancerSummary().getTumorSummaryByIdentifier(newId).addFact(FHIRConstants.HAS_TUMOR_TYPE, tumorTypeF),
			getCancerSummary().addFact(FHIRConstants.HAS_BODY_SITE, tf)
		}	
		
		insert (tumorTypeF);
		
		$tl_1.setReadyForRetraction(true);
		update ($tl_1);

		System.out.print(".");
end

