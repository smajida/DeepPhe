//created on: Feb 18, 2016
package org.healthnlp.deepphe.uima.drools;

import org.healthnlp.deepphe.fhir.summary.CancerSummary;
import org.healthnlp.deepphe.util.FHIRUtils;
import org.healthnlp.deepphe.util.FHIRConstants;

import java.net.URI;

import org.healthnlp.deepphe.fhir.summary.MedicalRecord;
import org.healthnlp.deepphe.fhir.fact.Fact;


import org.healthnlp.deepphe.fhir.summary.*;
//import org.healthnlp.deepphe.fhir.summary.CancerPhenotype;  // can't import this class

import java.util.Set;
import java.lang.Integer;
import java.util.Map;
import java.util.HashMap;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.List;

declare CountOccurences
   numDocuments : 		Integer
   tClassificationMap : Map
   numNClassification : Integer
   numMClassification:  Integer
   numCancerType : 		Integer
end


rule "initOccurences"
  salience 999999999
	when
	then    
	  insert( new CountOccurences(0,new HashMap(),0,0,0));
	  System.out.println("DONE init_Session");
end
		

rule "countOccurences"
	salience 10000
	no-loop true
	when 
		$record : MedicalRecord()
		$docSet : Set( )
			from accumulate (Fact($docID : documentIdentifier), collectSet ( $docID))
		
		$tClassMap : Map()
		from accumulate ( $fact : Fact(category == "hasTClassification", $uri : uri),
			init( HashMap m = new HashMap(); ),
			action( if(m.get($uri) == null) m.put($uri, new ArrayList());
			((List)m.get($uri)).add($fact); ),
            reverse ( ((List)m.get($uri)).remove($fact); ), 
        	result( m ) )
					
		$nClassifSet: Set()
			from accumulate (Fact(category == "hasNClassification", $name : name), collectSet ( $name))	
		$mClassifSet: Set()
			from accumulate (Fact(category == "hasMClassification", $name : name), collectSet ( $name))
		$cancerTypeSet: Set()
			from accumulate (Fact(category == "hasCancerType", $name : name), collectSet ( $name))	
			
		$oFact : CountOccurences()
		
	then
	modify ( $oFact ) {setNumDocuments( $docSet.size()), setTClassificationMap( $tClassMap),  setNumNClassification( $nClassifSet.size()),
		setNumMClassification( $mClassifSet.size()), setNumCancerType( $cancerTypeSet.size())};
		
	//modify ( $oFact ) {setNumDocuments( $docSet.size()), new HashMap(),  setNumNClassification( $nClassifSet.size()),
	//	setNumMClassification( $mClassifSet.size()), setNumCancerType( $cancerTypeSet.size())};
		
	System.out.println("Number of documents for patinet: "+$docSet.size());
	System.out.println("TClassification set for patinet: "+$tClassMap);
	System.out.println("TClassification set for patinet: "+$nClassifSet);
	System.out.println("TClassification set for patinet: "+$mClassifSet);
	System.out.println("cancerTypeSet set for patinet: "+$cancerTypeSet);
end  


rule "setTClassification"
	no-loop true
	when
		//$record : MedicalRecord()
		
		$record : MedicalRecord($cancerSummmary : cancerSummary)
		$phenotype : CancerPhenotype() from $cancerSummmary.phenotype
		
		//$tClassificationMap : CountOccurences(tClassificationMap.size() == 1)
		CountOccurences($tClassificationMap :tClassificationMap, $tClassificationMap.size() == 1)
		//($tClassificationMap.size() == 1)
		//$fact : Fact(category == "hasTClassification")
	then
		$record.getCancerSummary().getPhenotype().addFact("hasTClassification", ((Fact)((new ArrayList)$tClassificationMap.values()).get(0)));
		
		//String value = (new ArrayList<String>(linkedHashMap.values())).get(pos);
		
		System.out.println("setTClassification to ");
end


rule "setMClassification"
	no-loop true
	when
		$record : MedicalRecord()
		CountOccurences(numMClassification == 1)
		$fact : Fact(category == "hasMClassification")
	then
		$record.getCancerSummary().getPhenotype().addFact("hasMClassification", $fact);
		System.out.println("setMClassification to "+ $fact.getName());
end

rule "setNClassification"
	no-loop true
	when
		$record : MedicalRecord()
		CountOccurences(numNClassification == 1)
		$fact : Fact(category == "hasNClassification")
	then
		$record.getCancerSummary().getPhenotype().addFact("hasNClassification", $fact);
		System.out.println("setNClassification to "+ $fact.getName());
end
		
		

    

/*rule "TEST_NumDocumentsReset"
	when 
		CountOccurences( $pat: numDocuments > 1 )
	then
		System.out.println("reset");
end

rule coll
when
  $map: Map()
    from accumulate( $o: Order( $t: type ),
         init( Map m = new HashMap();
               m.put( "A", new HashSet() );
               m.put( "B", new HashSet() ); ),
         action( ((Set)m.get( $t )).add( $o ); ),
         reverse( ((Set)m.get( $t )).remove( $o ); ),
         result( m ) )
then
  System.out.println( $map.get( "A" ) );
  System.out.println( $map.get( "B" ) );
end
*/




