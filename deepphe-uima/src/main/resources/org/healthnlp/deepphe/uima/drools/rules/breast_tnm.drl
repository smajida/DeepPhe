import org.healthnlp.deepphe.fhir.fact.Fact;

import java.util.Set;
import java.lang.Integer;
import java.util.Map;
import java.util.HashMap;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.List;

import org.healthnlp.deepphe.util.FHIRUtils;
import org.healthnlp.deepphe.util.FHIRConstants;

import org.healthnlp.deepphe.fhir.fact.Fact;
import org.healthnlp.deepphe.fhir.fact.FactFactory;
import org.healthnlp.deepphe.fhir.fact.FactHelper;

import org.healthnlp.deepphe.fhir.summary.*;
import org.healthnlp.deepphe.uima.drools.*;

import org.apache.ctakes.cancer.owl.OwlConstants;

/**
* Create record-level T
*/
rule "record-setGenercTClassification"
	salience 55559
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		IdMapper($oldSummaryId : oldSummaryId, $newSummaryId == newSummaryId)
		
		$cPheTclFact : Fact(summaryType == "CancerPhenotype", documentType != "RecordSummary", category == "hasGenericTClassification", $name : name)
			
		not(Fact(summaryType == "CancerPhenotype", documentType == "RecordSummary", category == "hasGenericTClassification", 
			provenanceFacts contains $cPheTclFact))
		then
			String newId = "CancerPhenotype-"+$newSummaryId.replace("CancerSummary-","");
			Fact cf = FactFactory.createFact($cPheTclFact, $cPheTclFact.getType(), OwlConstants.BREAST_CANCER_OWL+"#"+$name, "RecordSummary");
			cf.setIdentifier(newId);
			cf.setSummaryId(newId);
			cf.addProvenanceFact($cPheTclFact);
			cf.addContainerIdentifier($newSummaryId);
			insert(cf);
			insert(new IdMapper($cPheTclFact.getIdentifier(), newId, $cPheTclFact.getDocumentType(), $cPheTclFact.getSummaryId(), newId));
			FactHelper.addFactToSummary(cf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);

end   

/**
* Create record-level N
*/
rule "record-setGenercNClassification"
	salience 55559
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		IdMapper($oldSummaryId : oldSummaryId, $newSummaryId == newSummaryId)
		
		$cPheTclFact : Fact(summaryType == "CancerPhenotype", documentType != "RecordSummary", category == "hasGenericNClassification", $name : name)
			
		not(Fact(summaryType == "CancerPhenotype", documentType == "RecordSummary", category == "hasGenericNClassification", 
			provenanceFacts contains $cPheTclFact))
		then
			String newId = "CancerPhenotype-"+$newSummaryId.replace("CancerSummary-","");
			Fact cf = FactFactory.createFact($cPheTclFact, $cPheTclFact.getType(), OwlConstants.BREAST_CANCER_OWL+"#"+$name, "RecordSummary");
			cf.setIdentifier(newId);
			cf.addProvenanceFact($cPheTclFact);
			cf.addContainerIdentifier($newSummaryId);
			insert(cf);
			insert(new IdMapper($cPheTclFact.getIdentifier(), newId, $cPheTclFact.getDocumentType(), $cPheTclFact.getSummaryId(), newId));
			FactHelper.addFactToSummary(cf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);

end 	

/**
* Create record-level M
*/
rule "record-setGenercMClassification"
	salience 55559
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		IdMapper($oldSummaryId : oldSummaryId, $newSummaryId == newSummaryId)
		
		$cPheTclFact : Fact(summaryType == "CancerPhenotype", documentType != "RecordSummary", category == "hasGenericMClassification", $name : name)
			
		not(Fact(summaryType == "CancerPhenotype", documentType == "RecordSummary", category == "hasGenericMClassification", 
			provenanceFacts contains $cPheTclFact))
		then
			String newId = "CancerPhenotype-"+$newSummaryId.replace("CancerSummary-","");
			Fact cf = FactFactory.createFact($cPheTclFact, $cPheTclFact.getType(), OwlConstants.BREAST_CANCER_OWL+"#"+$name, "RecordSummary");
			cf.setIdentifier(newId);
			cf.addProvenanceFact($cPheTclFact);
			cf.addContainerIdentifier($newSummaryId);
			insert(cf);
			insert(new IdMapper($cPheTclFact.getIdentifier(), newId, $cPheTclFact.getDocumentType(), $cPheTclFact.getSummaryId(), newId));
			FactHelper.addFactToSummary(cf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);

end 

/**
* create record-level prefixes
*/
rule "record-setTNMPrefix"
	salience 55557
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		IdMapper($oldSummaryId : oldSummaryId, $newSummaryId == newSummaryId)
		
		$cPheTFact : Fact(summaryType == "CancerPhenotype", documentType == "RecordSummary", category == "hasGenericTClassification", 
			$newCPheSummaryId : summaryId)
		IdMapper($oldcPheId : oldId, newSummaryId == $newCPheSummaryId)
		$tnmPrefFact : Fact(summaryType == "CancerPhenotype", documentType != "RecordSummary", category =="hasTNMPrefix",
			containerIdentifier contains  $oldcPheId, $name : name)
		not(Fact (summaryType == "CancerPhenotype", documentType == "RecordSummary", category == "hasTNMPrefix", 
			provenanceFacts contains $tnmPrefFact))
			
		then
		
			String newId = "CancerPhenotype-"+$newSummaryId.replace("CancerSummary-","");
			Fact cf = FactFactory.createFact($tnmPrefFact, $tnmPrefFact.getType(), OwlConstants.BREAST_CANCER_OWL+"#"+$name, "RecordSummary");
			cf.setIdentifier(newId);
			cf.addProvenanceFact($tnmPrefFact);
			cf.addContainerIdentifier($newSummaryId);
			insert(cf);
			insert(new IdMapper($tnmPrefFact.getIdentifier(), newId, $tnmPrefFact.getDocumentType(), $tnmPrefFact.getSummaryId(), newId));
			FactHelper.addFactToSummary(cf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);

end  

/*
* ****genericT-1
*If there is a generic T value with an asserted prefix “p”, then convert generic T value to a pathologic primary T value. 
*/ 	
rule "genericT-1-to-Pathologic"
	salience 55544
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		
		$genericTFact : Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasGenericTClassification",
				containerIdentifier contains $newSummaryId, $genericName : name)
		Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasTNMPrefix", name == "p_modifier")
		not(Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasPathologicTClassification"))		
	then	
		String newId = "CancerPhenotype-"+$newSummaryId.replace("CancerSummary-","");
		//modify name
		String brcaName = "Breast_Cancer_"+"p"+$genericName.replace("Stage_Finding", "TNM_Finding");
		Fact cf = FactFactory.createFact($genericTFact, $genericTFact.getType(), OwlConstants.BREAST_CANCER_OWL+"#"+brcaName, "RecordSummary");
		cf.setCategory("hasPathologicTClassification");
		cf.setIdentifier(newId);
		cf.addProvenanceFacts($genericTFact.getProvenanceFacts());
		cf.addContainerIdentifier($newSummaryId);
		insert(cf);
		FactHelper.addFactToSummary(cf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);

end 

/*
* genericT-2:
* If there is a generic T value asserted within a report with type=“SP”, then convert generic T value to a pathologic primary T value. 
*/
rule "genericT-2-to-Pathologic"
	salience 55542
	no-loop true
	when
		not(Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasPathologicTClassification"))
		not(Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasTNMPrefix", name == "p_modifier"))
		
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		$origFact : Fact(documentType != "RecordSummary", summaryType =="CancerPhenotype", category == "hasGenericTClassification",
			documentType == "Pathology Report")
		$genericTFact : Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasGenericTClassification",
				containerIdentifier contains $newSummaryId, $genericName : name, provenanceFacts contains $origFact)
			
	then	
		String newId = "CancerPhenotype-"+$newSummaryId.replace("CancerSummary-","");
		//modify name
		String brcaName = "Breast_Cancer_"+"p"+$genericName.replace("Stage_Finding", "TNM_Finding");
		Fact cf = FactFactory.createFact($genericTFact, $genericTFact.getType(), OwlConstants.BREAST_CANCER_OWL+"#"+brcaName, "RecordSummary");
		cf.setCategory("hasPathologicTClassification");
		cf.setIdentifier(newId);
		cf.addProvenanceFacts($genericTFact.getProvenanceFacts());
		cf.addContainerIdentifier($newSummaryId);
		insert(cf);
		FactHelper.addFactToSummary(cf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);

end 

/*
* genericN-1:
* If there is a generic N value with an asserted prefix “p”, then convert generic N value to a pathologic regional lymph node N value. 
*/
rule "genericN-1-to-Pathologic"
	salience 55544
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		
		$genericTFact : Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasGenericNClassification",
				containerIdentifier contains $newSummaryId, $genericName : name)
		Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasTNMPrefix", name == "p_modifier")
		not(Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasPathologicNClassification"))		
	then	
		String newId = "CancerPhenotype-"+$newSummaryId.replace("CancerSummary-","");
		//modify name
		String brcaName = "Breast_Cancer_"+"p"+$genericName.replace("Stage_Finding", "TNM_Finding");
		Fact cf = FactFactory.createFact($genericTFact, $genericTFact.getType(), OwlConstants.BREAST_CANCER_OWL+"#"+brcaName, "RecordSummary");
		cf.setCategory("hasPathologicNClassification");
		cf.setIdentifier(newId);
		cf.addProvenanceFacts($genericTFact.getProvenanceFacts());
		cf.addContainerIdentifier($newSummaryId);
		insert(cf);
		FactHelper.addFactToSummary(cf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);

end  

/*
* genericN-2:
* If there is a generic N value asserted within a report with type=“SP”, then convert generic N value to a pathologic regional lymph node N value. 
*/ 
rule "genericN-2-to-Pathologic"
	salience 55542
	no-loop true
	when
		not(Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasPathologicNClassification"))
		not(Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasTNMPrefix", name == "p_modifier"))
		
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		$origFact : Fact(documentType != "RecordSummary", summaryType =="CancerPhenotype", category == "hasGenericNClassification",
			documentType == "Pathology Report")
		$genericTFact : Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasGenericNClassification",
				containerIdentifier contains $newSummaryId, $genericName : name, provenanceFacts contains $origFact)
			
	then	
		String newId = "CancerPhenotype-"+$newSummaryId.replace("CancerSummary-","");
		//modify name
		String brcaName = "Breast_Cancer_"+"p"+$genericName.replace("Stage_Finding", "TNM_Finding");
		Fact cf = FactFactory.createFact($genericTFact, $genericTFact.getType(), OwlConstants.BREAST_CANCER_OWL+"#"+brcaName, "RecordSummary");
		cf.setCategory("hasPathologicNClassification");
		cf.setIdentifier(newId);
		cf.addProvenanceFacts($genericTFact.getProvenanceFacts());
		cf.addContainerIdentifier($newSummaryId);
		insert(cf);
		FactHelper.addFactToSummary(cf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);

end 

/* genericM-1:
* If there is a generic M value with an asserted prefix “p”, then convert generic M value to a pathologic distant metastasis M value.
*/
rule "genericM-1-to-Pathologic-M1"
	salience 55544
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		
		$genericTFact : Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasGenericMClassification",
				containerIdentifier contains $newSummaryId, name matches ".*M1.*")
		Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasTNMPrefix", name == "p_modifier")
		not(Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasPathologicMClassification"))		
	then	
		String newId = "CancerPhenotype-"+$newSummaryId.replace("CancerSummary-","");
		//modify name
		String brcaName = "Breast_Cancer_"+"p"+$genericTFact.getName().replace("Stage_Finding", "TNM_Finding");
		Fact cf = FactFactory.createFact($genericTFact, $genericTFact.getType(), OwlConstants.BREAST_CANCER_OWL+"#"+brcaName, "RecordSummary");
		cf.setCategory("hasPathologicMClassification");
		cf.setIdentifier(newId);
		cf.addProvenanceFacts($genericTFact.getProvenanceFacts());
		cf.addContainerIdentifier($newSummaryId);
		insert(cf);
		FactHelper.addFactToSummary(cf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);
end  

/* genericM-1:
* If there is a generic M value with an asserted prefix “p”, then convert generic M value to a pathologic distant metastasis M value.
*/
rule "genericM-1-to-Pathologic-MX"
	salience 55544
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		
		$genericTFact : Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasGenericMClassification",
				containerIdentifier contains $newSummaryId, name matches ".*MX.*")
		Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasTNMPrefix", name == "p_modifier")
		not(Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasPathologicMClassification"))		
	then	
		String newId = "CancerPhenotype-"+$newSummaryId.replace("CancerSummary-","");
		//modify name
		String brcaName = "Breast_Cancer_"+"p"+$genericTFact.getName().replace("Stage_Finding", "TNM_Finding");
		Fact cf = FactFactory.createFact($genericTFact, $genericTFact.getType(), OwlConstants.BREAST_CANCER_OWL+"#"+brcaName, "RecordSummary");
		cf.setCategory("hasPathologicMClassification");
		cf.setIdentifier(newId);
		cf.addProvenanceFacts($genericTFact.getProvenanceFacts());
		cf.addContainerIdentifier($newSummaryId);
		insert(cf);
		FactHelper.addFactToSummary(cf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);
end  
 
/*
* genericM-2 :
* If there is a generic M value asserted within a report with type=“SP”, then convert generic M value to a pathologic distant metastasis M value. 
*/ 
rule "genericM-2-to-Pathologic-M1"
	salience 55542
	no-loop true
	when
		not(Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasPathologicMClassification"))
		not(Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasTNMPrefix", name == "p_modifier"))
		
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		$origFact : Fact(documentType != "RecordSummary", summaryType =="CancerPhenotype", category == "hasGenericMClassification",
			documentType == "Pathology Report")
		$genericTFact : Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasGenericMClassification",
				containerIdentifier contains $newSummaryId, name matches ".*M1.*", provenanceFacts contains $origFact)
			
	then	
		String newId = "CancerPhenotype-"+$newSummaryId.replace("CancerSummary-","");
		//modify name
		String brcaName = "Breast_Cancer_"+"p"+$genericTFact.getName().replace("Stage_Finding", "TNM_Finding");
		Fact cf = FactFactory.createFact($genericTFact, $genericTFact.getType(), OwlConstants.BREAST_CANCER_OWL+"#"+brcaName, "RecordSummary");
		cf.setCategory("hasPathologicNClassification");
		cf.setIdentifier(newId);
		cf.addProvenanceFacts($genericTFact.getProvenanceFacts());
		cf.addContainerIdentifier($newSummaryId);
		insert(cf);
		FactHelper.addFactToSummary(cf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);

end 

/*
* genericM-2 :
* If there is a generic M value asserted within a report with type=“SP”, then convert generic M value to a pathologic distant metastasis M value. 
*/ 
rule "genericM-2-to-Pathologic-MX"
	salience 55542
	no-loop true
	when
		not(Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasPathologicMClassification"))
		not(Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasTNMPrefix", name == "p_modifier"))
		
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		$origFact : Fact(documentType != "RecordSummary", summaryType =="CancerPhenotype", category == "hasGenericMClassification",
			documentType == "Pathology Report")
		$genericTFact : Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasGenericMClassification",
				containerIdentifier contains $newSummaryId, name matches ".*MX.*", provenanceFacts contains $origFact)
			
	then	
		String newId = "CancerPhenotype-"+$newSummaryId.replace("CancerSummary-","");
		//modify name
		String brcaName = "Breast_Cancer_"+"p"+$genericTFact.getName().replace("Stage_Finding", "TNM_Finding");
		Fact cf = FactFactory.createFact($genericTFact, $genericTFact.getType(), OwlConstants.BREAST_CANCER_OWL+"#"+brcaName, "RecordSummary");
		cf.setCategory("hasPathologicNClassification");
		cf.setIdentifier(newId);
		cf.addProvenanceFacts($genericTFact.getProvenanceFacts());
		cf.addContainerIdentifier($newSummaryId);
		insert(cf);
		FactHelper.addFactToSummary(cf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);

end 


/*
* genericT-3 
* If there is a generic T value with an asserted prefix “c”, then convert generic T value to a clinical primary T value. 
*/
rule "genericT-3-to-Clinical"
	salience 55544
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		
		$genericTFact : Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasGenericTClassification",
				containerIdentifier contains $newSummaryId, $genericName : name)
		Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasTNMPrefix", name == "c_modifier")
		not(Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasClinicalTClassification"))		
	then	
		String newId = "CancerPhenotype-"+$newSummaryId.replace("CancerSummary-","");
		//modify name
		String brcaName = "Breast_Cancer_"+"c"+$genericName.replace("Stage_Finding", "TNM_Finding");
		Fact cf = FactFactory.createFact($genericTFact, $genericTFact.getType(), OwlConstants.BREAST_CANCER_OWL+"#"+brcaName, "RecordSummary");
		cf.setCategory("hasClinicalTClassification");
		cf.setIdentifier(newId);
		cf.addProvenanceFacts($genericTFact.getProvenanceFacts());
		cf.addContainerIdentifier($newSummaryId);
		insert(cf);
		FactHelper.addFactToSummary(cf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);

end  

/*
* genericT-4
* If there is a generic T value asserted within a report with type !=“SP”, then convert generic T value to a clinical primary T value. 
*/ 
rule "genericT-4-to-Clinical"
	salience 55542
	no-loop true
	when
		not(Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasClinicalTClassification"))
		not(Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasTNMPrefix", name == "c_modifier"))
		
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		$origFact : Fact(documentType != "RecordSummary", summaryType =="CancerPhenotype", category == "hasGenericTClassification",
			documentType != "Pathology Report")
		$genericTFact : Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasGenericTClassification",
				containerIdentifier contains $newSummaryId, $genericName : name, provenanceFacts contains $origFact)
			
	then	

		String newId = "CancerPhenotype-"+$newSummaryId.replace("CancerSummary-","");
		//modify name
		String brcaName = "Breast_Cancer_"+"c"+$genericName.replace("Stage_Finding", "TNM_Finding");
		Fact cf = FactFactory.createFact($genericTFact, $genericTFact.getType(), OwlConstants.BREAST_CANCER_OWL+"#"+brcaName, "RecordSummary");
		cf.setCategory("hasClinicalTClassification");
		cf.setIdentifier(newId);
		cf.addProvenanceFacts($genericTFact.getProvenanceFacts());
		cf.addContainerIdentifier($newSummaryId);
		insert(cf);
		FactHelper.addFactToSummary(cf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);

end 

/*
* genericN-3 :
* If there is a generic N value with an asserted prefix “c”, then convert generic N value to a clinical regional lymph node N value. 
*/
rule "genericN-3-to-Clinical"
	salience 55544
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		
		$genericTFact : Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasGenericNClassification",
				containerIdentifier contains $newSummaryId, $genericName : name)
		Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasTNMPrefix", name == "c_modifier")
		not(Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasClinicalNClassification"))		
	then	
		String newId = "CancerPhenotype-"+$newSummaryId.replace("CancerSummary-","");
		//modify name
		String brcaName = "Breast_Cancer_"+"c"+$genericName.replace("Stage_Finding", "TNM_Finding");
		Fact cf = FactFactory.createFact($genericTFact, $genericTFact.getType(), OwlConstants.BREAST_CANCER_OWL+"#"+brcaName, "RecordSummary");
		cf.setCategory("hasClinicalNClassification");
		cf.setIdentifier(newId);
		cf.addProvenanceFacts($genericTFact.getProvenanceFacts());
		cf.addContainerIdentifier($newSummaryId);
		insert(cf);
		FactHelper.addFactToSummary(cf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);

end  

/*
* genericN-4 :
* If there is a generic N value asserted within a report with type !=“SP”, then convert generic N value to a clinical regional lymph node N value. 
*/
rule "genericN-4-to-Clinical"
	salience 55542
	no-loop true
	when
		not(Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasClinicalNClassification"))
		not(Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasTNMPrefix", name == "c_modifier"))
		
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		$origFact : Fact(documentType != "RecordSummary", summaryType =="CancerPhenotype", category == "hasGenericNClassification",
			documentType != "Pathology Report")
		$genericTFact : Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasGenericNClassification",
				containerIdentifier contains $newSummaryId, $genericName : name, provenanceFacts contains $origFact)
			
	then	

		String newId = "CancerPhenotype-"+$newSummaryId.replace("CancerSummary-","");
		//modify name
		String brcaName = "Breast_Cancer_"+"c"+$genericName.replace("Stage_Finding", "TNM_Finding");
		Fact cf = FactFactory.createFact($genericTFact, $genericTFact.getType(), OwlConstants.BREAST_CANCER_OWL+"#"+brcaName, "RecordSummary");
		cf.setCategory("hasClinicalNClassification");
		cf.setIdentifier(newId);
		cf.addProvenanceFacts($genericTFact.getProvenanceFacts());
		cf.addContainerIdentifier($newSummaryId);
		insert(cf);
		FactHelper.addFactToSummary(cf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);

end 

/*
* genericM-3 :
* If there is a generic M value with an asserted prefix “c”, then convert generic M value to a clinical distant metastasis M value. 
*/
rule "genericM-3-to-Clinical"
	salience 55544
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		
		$genericTFact : Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasGenericMClassification",
				containerIdentifier contains $newSummaryId, $genericName : name)
		Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasTNMPrefix", name == "c_modifier")
		not(Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasClinicalMClassification"))		
	then	
		String newId = "CancerPhenotype-"+$newSummaryId.replace("CancerSummary-","");
		//modify name
		String brcaName = "Breast_Cancer_"+"c"+$genericName.replace("Stage_Finding", "TNM_Finding");
		Fact cf = FactFactory.createFact($genericTFact, $genericTFact.getType(), OwlConstants.BREAST_CANCER_OWL+"#"+brcaName, "RecordSummary");
		cf.setCategory("hasClinicalMClassification");
		cf.setIdentifier(newId);
		cf.addProvenanceFacts($genericTFact.getProvenanceFacts());
		cf.addContainerIdentifier($newSummaryId);
		insert(cf);
		FactHelper.addFactToSummary(cf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);

end  

/*
* genericM-4 :
* If there is a generic M value asserted within a report with type !=“SP”, then convert generic M value to a clinical distant metastasis M value. 
*/
rule "genericM-4-to-Clinical"
	salience 55542
	no-loop true
	when
		not(Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasClinicalMClassification"))
		not(Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasTNMPrefix", name == "c_modifier"))
		
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		$origFact : Fact(documentType != "RecordSummary", summaryType =="CancerPhenotype", category == "hasGenericMClassification",
			documentType != "Pathology Report")
		$genericTFact : Fact(documentType == "RecordSummary", summaryType=="CancerPhenotype", category == "hasGenericMClassification",
				containerIdentifier contains $newSummaryId, $genericName : name, provenanceFacts contains $origFact)
			
	then	

		String newId = "CancerPhenotype-"+$newSummaryId.replace("CancerSummary-","");
		//modify name
		String brcaName = "Breast_Cancer_"+"c"+$genericName.replace("Stage_Finding", "TNM_Finding");
		Fact cf = FactFactory.createFact($genericTFact, $genericTFact.getType(), OwlConstants.BREAST_CANCER_OWL+"#"+brcaName, "RecordSummary");
		cf.setCategory("hasClinicalMClassification");
		cf.setIdentifier(newId);
		cf.addProvenanceFacts($genericTFact.getProvenanceFacts());
		cf.addContainerIdentifier($newSummaryId);
		insert(cf);
		FactHelper.addFactToSummary(cf, $record.getCancerSummary(), newId, OwlConstants.BREAST_CANCER_OWL);

end 


/**
* M1-1: - incorrect
* If there is an instance of M1, then create instance of tumor with tumor type = "distant recurrence". 
*/
/*
rule "M1-1"
	salience 55559
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary",  documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		IdMapper($oldSummaryId : oldSummaryId, $newSummaryId == newSummaryId)
		
		$cPheFact : Fact(summaryType == "CancerPhenotype", documentType != "RecordSummary", containerIdentifier contains $oldSummaryId, 
			category == "hasGenericMClassification", name matches ".*M1-1.*", $cPheSummaryId : summaryId)
			
			
		not(Fact(summaryType == "CancerSummary", documentType != "RecordSummary", category == "hasGenericMClassification"))
		not(Fact(summaryType == "TumorSummary", category == "TumorType", name == "DistantRecurrence", documentType == "RecordSummary"))
		
		$tumorFact : Fact(documentType != "RecordSummary", $tumorId : identifier, $tumorSummaryId : summaryId, containerIdentifier contains $cPheSummaryId)
		then
		  //??? Location???
end
*/

/**
* pN1-1: - incorect
* If there is an instance of pN1, then create an instance of tumor with tumor type = "regional recurrence" 
* and add a location of "lymph node" to the tumor. 
*/
/*
rule "pN1-1"
	salience 55559
	no-loop true
	when
		$record : MedicalRecord()
		$domain : Domain($domainName : domainName)	
		$cancerFact : Fact(summaryType=="CancerSummary", category == "hasBodySite", documentType == "RecordSummary", name == $domainName, 
						$newSummaryId : summaryId)
		IdMapper($oldSummaryId : oldSummaryId, $newSummaryId == newSummaryId)
		
		$cPheFact : Fact(summaryType == "CancerPhenotype", documentType != "RecordSummary", containerIdentifier contains $oldSummaryId, 
			category == "hasGenericNClassification", name matches ".*N1-1.*", $cPheSummaryId : summaryId)
		
		Fact(documentType != "RecordSummary", category == "hasTNMPrefix", name == "p_modifier", summaryId == $cPheSummaryId)
			
		not(Fact(summaryType == "CancerSummary", documentType != "RecordSummary", category == "hasGenericNClassification"))
		not(Fact(summaryType == "TumorSummary", category == "TumorType", name == "RegionalRecurrence", documentType == "RecordSummary"))
		
		$tumorFact : Fact(documentType != "RecordSummary", $tumorId : identifier, $tumorSummaryId : summaryId, containerIdentifier contains $cPheSummaryId)
		then
		  //??? Location???
end
*/
		

/*
rule "create-TNMClassification-CP"
	salience 7779
	no-loop true
	when
		$record : MedicalRecord()
		$tFact : Fact(category == "hasTClassification",  documentType != "Pathology Report", $tname : name, $patientId : patientIdentifier,
			$documentId : documentId)
		$nFact : Fact(category == "hasNClassification",  documentType != "Pathology Report", $nname : name, patientIdentifier==$patientId,
			 documentId==$documentId)
		$mFact : Fact(category == "hasMClassification",  documentType != "Surgical Pathology Report", $mname : name, patientIdentifier==$patientId,
			 documentId==$documentId)
		$domain : Domain($domainName : domainName)
		$cFact : Fact(summaryType == "CancerSummary", documentType == "RecordSummary", 
					 $cancer_bs_name : name, $cSummaryId : summaryId, 
					$cancer_ancestors: ancestors, ($cancer_bs_name==$domainName || $cancer_ancestors contains $domainName))
		not(
			Fact(summaryType == "CancerPhenotype", documentType == "RecordSummary", $tSummaryId : summaryId, containerIdentifier contains $cSummaryId)
		)
		
	then 
		modify($mFact){	addRulesApplied("genericT-1.1") }
	// create cPhe fact
		Fact tf = FactFactory.createFact($tumor1_f, $tumor1_f.getType(), OwlOntologyConceptUtil.BREAST_CANCER_OWL+"#"+$tumor1_name, "RecordSummary");
		tf.addContainerIdentifier($cancerSummaryId);
		String newId = "TumorSummary-"+$tumor1_f.getType()+"-"+$tumor1_name;
		tf.setIdentifier(newId);
		tf.addProvenanceFact($tumor1_f);
		tf.addContainerIdentifier($cSummaryFact.getSummaryId());
		insert(new idMapper($tumor1_identifier, newId, $documentType, $tumor1_f.getSummaryId(), tf.getSummaryId()));
		insert(tf);
		FactHelper.addFactToSummary($tumor1_f, $record.getCancerSummary(), newId, OwlOntologyConceptUtil.BREAST_CANCER_OWL);
		
 end
 
*/

/*
* If there is an instance of pN1, then create an instance of positive lymph node. 
* ==
* pN1(?pn1), Positive(?pos), LymphNodeInvolvement(?lni), Tumor(?tumor), LocalRecurrence(?locrec), 
* TumorPhenotype(?tumphen), swrlx:makeOWLThing(?pn1, ?lni, ?tumor, ?tumphen) -> 
* hasInterpretation(?lni, ?pos), hasTumorType(?tumor, ?locrec), hasPhenotype(?tumor, ?tumphen), hasManifestation(?tumphen, ?lni) 
*/
/*
rule "TNM_pN1-1"
	no-loop true
	when
		
		$tFact : Fact(summaryType == "TumorSummary", name=="Local", $summaryType : summaryType, $summaryId : summaryId,
					rulesApplied not contains "TNM_pN1-1")
		$nFact : Fact(category == "hasMClassification", name matches ".*pN1.*", 
			containerIdentifier contains "aaa")
		$tphFact : Fact(summaryType == "TumorPhenotype", containerIdentifier contains "aaa")
		$lymphFact : Fact(category == "hasLymphNodeInvolvement", name matches ".*pN1.*", 
			containerIdentifier contains "aaa")
		
		// Positive(?pos)
        //hasInterpretation(?lni, ?pos)
        // hasManifestation(?tumphen, ?lni)
	
		
	then 
		System.out.println("TNM_pN1-1 fired");
		//System.out.println(" ***** FOUND positive lymph node "+$mMap);
 end 
 */
	
/*
* If there is an instance of Tis, then create an instance of tumor with tumor type="primary" 
* that has a tumor phenotype with tumor extent="in-situ". 
* ==
* Tis(?tis), Tumor(?tumor), TumorPhenotype(?tumphen), PrimaryTumor(?primary), In-Situ(?insitu), 
* swrlx:makeOWLThing(?tis, ?tumor, ?tumorphen, ?insitu) -> hasTumorType(?tumor, ?primary), 
* hasPhenotype(?tumor, ?tumorphen), hasTumorExtent(?tumorphen, ?insitu) 
*/
/*
rule "TNM_Tis-1" 
	no-loop true
	when
	
		$tFact : Fact(summaryType == "TumorSummary", $summaryType : summaryType, $summaryId : summaryId,
					rulesApplied not contains "TNM_Tis-1")
		$tisFact : Fact(category == "hasTClassification", name matches ".*Tis.*",
				containerIdentifier contains "aaa")
		$tphFact : Fact(summaryType == "TumorPhenotype", containerIdentifier contains "aaa")
		$inFact : Fact(name=="In_Situ_Lesion", 	category == "hasTumorExtent", containerIdentifier contains "aaa")	
		// PrimaryTumor(?primary)
		
	then 
		System.out.println(" ***** FOUND Tis-1 "+$tFact);
		// hasTumorExtent(?tumorphen, ?insitu) 
 end 
 */
 
/*
* If there is an instance of pN1mi, then create an instance of tumors with 
* tumor type ="distant recurrence" and body site = "lymph node" 
* ==
* pN1mi(?pn), Tumor(?tumor), DistantRecurrence(?distant), 'Lymph Node'(?ln), BreastCancerTumorPhenotype(?tumorphen), 
* Micrometastasis(?micromet) -> hasTumorType(?tumor, ?distant), 
* hasPhenotype(?tumor, ?tumorphen), hasManifestation(?tumorphen, ?micromet) 
*/
/*
rule "TNM_pN1m1-1"
	when
		$tFact : Fact(summaryType == "TumorSummary", name=="Distant", $summaryType : summaryType, $summaryId : summaryId,
					rulesApplied not contains "TNM_pN1m1-1")
		
		$nmFact : Fact(category == "hasNClassification", name matches ".*pN1m1.*", containerIdentifier contains "aaa")
		$tphFact : Fact(summaryType == "TumorPhenotype", containerIdentifier contains "aaa")
		$sFact : Fact(category == "hasBodySite", name=="Lymph Node", containerIdentifier contains "aaa")
		
		//Micrometastasis
	then 
		System.out.println(" ***** FOUND positive lymph node "+$sFact);
 end  

*/
    
