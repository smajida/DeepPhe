import org.healthnlp.deepphe.fhir.fact.Fact;

import java.util.Set;
import java.lang.Integer;
import java.util.Map;
import java.util.HashMap;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.List;

import org.healthnlp.deepphe.util.FHIRUtils;
import org.healthnlp.deepphe.util.FHIRConstants;

import org.healthnlp.deepphe.fhir.fact.Fact;
import org.healthnlp.deepphe.fhir.fact.FactFactory;
import org.healthnlp.deepphe.fhir.fact.FactHelper;

import org.healthnlp.deepphe.fhir.summary.*;
import org.healthnlp.deepphe.uima.drools.*;

/*

rule "create-TNMClassification-CP"
	salience 7779
	no-loop true
	when
		$record : MedicalRecord()
		$tFact : Fact(category == "hasTClassification",  documentType != "Surgical Pathology Report", $tname : name, $patientId : patientIdentifier,
			$documentId : documentId)
		$nFact : Fact(category == "hasNClassification",  documentType != "Surgical Pathology Report", $nname : name, patientIdentifier==$patientId,
			 documentId==$documentId)
		$mFact : Fact(category == "hasMClassification",  documentType != "Surgical Pathology Report", $mname : name, patientIdentifier==$patientId,
			 documentId==$documentId)
		$domain : Domain($domainName : domainName)
		$cFact : Fact(summaryType == "CancerSummary", documentType == "RecordSummary", 
					 $cancer_bs_name : name, $cSummaryId : summaryId, 
					$cancer_ancestors: ancestors, ($cancer_bs_name==$domainName || $cancer_ancestors contains $domainName))
		not(
			Fact(summaryType == "CancerPhenotype", documentType == "RecordSummary", $tSummaryId : summaryId, containerIdentifier contains $cSummaryId)
		)
		
	then 
		modify($mFact){	addRulesApplied("genericT-1.1") }
	// create cPhe fact
		Fact tf = FactFactory.createFact($tumor1_f, $tumor1_f.getType(), OwlOntologyConceptUtil.BREAST_CANCER_OWL+"#"+$tumor1_name, "RecordSummary");
		tf.addContainerIdentifier($cancerSummaryId);
		String newId = "TumorSummary-"+$tumor1_f.getType()+"-"+$tumor1_name;
		tf.setIdentifier(newId);
		tf.addProvenanceFact($tumor1_f);
		tf.addContainerIdentifier($cSummaryFact.getSummaryId());
		insert(new idMapper($tumor1_identifier, newId, $documentType, $tumor1_f.getSummaryId(), tf.getSummaryId()));
		insert(tf);
		FactHelper.addFactToSummary($tumor1_f, $record.getCancerSummary(), newId, OwlOntologyConceptUtil.BREAST_CANCER_OWL);
		
 end
 
*/

/*
* If there is an instance of pN1, then create an instance of positive lymph node. 
* ==
* pN1(?pn1), Positive(?pos), LymphNodeInvolvement(?lni), Tumor(?tumor), LocalRecurrence(?locrec), 
* TumorPhenotype(?tumphen), swrlx:makeOWLThing(?pn1, ?lni, ?tumor, ?tumphen) -> 
* hasInterpretation(?lni, ?pos), hasTumorType(?tumor, ?locrec), hasPhenotype(?tumor, ?tumphen), hasManifestation(?tumphen, ?lni) 
*/
rule "TNM_pN1-1"
	no-loop true
	when
		
		$tFact : Fact(summaryType == "TumorSummary", name=="Local", $summaryType : summaryType, $summaryId : summaryId,
					rulesApplied not contains "TNM_pN1-1")
		$nFact : Fact(category == "hasMClassification", name matches ".*pN1.*", 
			containerIdentifier contains "aaa")
		$tphFact : Fact(summaryType == "TumorPhenotype", containerIdentifier contains "aaa")
		$lymphFact : Fact(category == "hasLymphNodeInvolvement", name matches ".*pN1.*", 
			containerIdentifier contains "aaa")
		
		// Positive(?pos)
        //hasInterpretation(?lni, ?pos)
        // hasManifestation(?tumphen, ?lni)
	
		
	then 
		System.out.println("TNM_pN1-1 fired");
		//System.out.println(" ***** FOUND positive lymph node "+$mMap);
 end 
 
	
/*
* If there is an instance of Tis, then create an instance of tumor with tumor type="primary" 
* that has a tumor phenotype with tumor extent="in-situ". 
* ==
* Tis(?tis), Tumor(?tumor), TumorPhenotype(?tumphen), PrimaryTumor(?primary), In-Situ(?insitu), 
* swrlx:makeOWLThing(?tis, ?tumor, ?tumorphen, ?insitu) -> hasTumorType(?tumor, ?primary), 
* hasPhenotype(?tumor, ?tumorphen), hasTumorExtent(?tumorphen, ?insitu) 
*/
rule "TNM_Tis-1" 
	no-loop true
	when
	
		$tFact : Fact(summaryType == "TumorSummary", $summaryType : summaryType, $summaryId : summaryId,
					rulesApplied not contains "TNM_Tis-1")
		$tisFact : Fact(category == "hasTClassification", name matches ".*Tis.*",
				containerIdentifier contains "aaa")
		$tphFact : Fact(summaryType == "TumorPhenotype", containerIdentifier contains "aaa")
		$inFact : Fact(name=="In_Situ_Lesion", 	category == "hasTumorExtent", containerIdentifier contains "aaa")	
		// PrimaryTumor(?primary)
		
	then 
		System.out.println(" ***** FOUND Tis-1 "+$tFact);
		// hasTumorExtent(?tumorphen, ?insitu) 
 end 
 
 
/*
* If there is an instance of pN1mi, then create an instance of tumors with 
* tumor type ="distant recurrence" and body site = "lymph node" 
* ==
* pN1mi(?pn), Tumor(?tumor), DistantRecurrence(?distant), 'Lymph Node'(?ln), BreastCancerTumorPhenotype(?tumorphen), 
* Micrometastasis(?micromet) -> hasTumorType(?tumor, ?distant), 
* hasPhenotype(?tumor, ?tumorphen), hasManifestation(?tumorphen, ?micromet) 
*/
rule "TNM_pN1m1-1"
	when
		$tFact : Fact(summaryType == "TumorSummary", name=="Distant", $summaryType : summaryType, $summaryId : summaryId,
					rulesApplied not contains "TNM_pN1m1-1")
		
		$nmFact : Fact(category == "hasNClassification", name matches ".*pN1m1.*", containerIdentifier contains "aaa")
		$tphFact : Fact(summaryType == "TumorPhenotype", containerIdentifier contains "aaa")
		$sFact : Fact(category == "hasBodySite", name=="Lymph Node", containerIdentifier contains "aaa")
		
		//Micrometastasis
	then 
		System.out.println(" ***** FOUND positive lymph node "+$sFact);
 end  


    
