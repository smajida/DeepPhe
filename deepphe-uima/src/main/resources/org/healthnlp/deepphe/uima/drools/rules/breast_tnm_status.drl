package org.healthnlp.deepphe.uima.drools;

import java.util.List;

import org.healthnlp.deepphe.util.FHIRUtils;
import org.healthnlp.deepphe.util.FHIRConstants;

import org.healthnlp.deepphe.fhir.fact.Fact;
import org.healthnlp.deepphe.fhir.fact.FactFactory;

import org.healthnlp.deepphe.fhir.summary.*;
import org.healthnlp.deepphe.uima.drools.Summarizer;



rule "getTNMClassificationStatus"
	salience 99999999
	no-loop true
	when
		$record : MedicalRecord()		
		$tFact : Fact(category == "hasTClassification", $tUri : uri, $patientId : patientIdentifier, $docId : documentIdentifier, rulesApplied not contains "getTNMClassificationStatus")
		$nFact : Fact(category == "hasNClassification", $nUri : uri, patientIdentifier==$patientId, documentIdentifier==$docId, rulesApplied not contains "getTNMClassificationStatus")
		$mFact : Fact(category == "hasMClassification", $mUri : uri, patientIdentifier==$patientId, documentIdentifier==$docId, rulesApplied not contains "getTNMClassificationStatus")
	then

		modify($tFact){	addRulesApplied("getTNMClassificationStatus") }
		modify($nFact){	addRulesApplied("getTNMClassificationStatus") }
		modify($mFact){	addRulesApplied("getTNMClassificationStatus") }
		
		Fact tf = FactFactory.createFact($tFact.getType(), $tUri);
		tf.addProvenanceFact($tFact);
		Fact nf = FactFactory.createFact($nFact.getType(), $nUri);
		nf.addProvenanceFact($nFact);
		Fact mf = FactFactory.createFact($mFact.getType(), $mUri);
		mf.addProvenanceFact($mFact);
		
		modify($record){
			getCancerSummary().getPhenotype().addFact($tFact.getCategory(), tf),
			getCancerSummary().getPhenotype().addFact($nFact.getCategory(), nf),
			getCancerSummary().getPhenotype().addFact($mFact.getCategory(), mf)
		}
			
		System.out.println("*** setTNMClassification for MR");

end